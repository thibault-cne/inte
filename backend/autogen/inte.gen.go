// Package autogen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package autogen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Admin_authScopes = "admin_auth.Scopes"
	AuthScopes       = "auth.Scopes"
	Inte_authScopes  = "inte_auth.Scopes"
	Std_authScopes   = "std_auth.Scopes"
)

// Defines values for CalendarDayTypes.
const (
	LinkDay    CalendarDayTypes = "link"
	PictureDay CalendarDayTypes = "picture"
	VideoDay   CalendarDayTypes = "video"
)

// Defines values for ErrorCodes.
const (
	ErrBadRequest          ErrorCodes = "bad_request"
	ErrForbidden           ErrorCodes = "forbidden"
	ErrInternalServerError ErrorCodes = "internal_server_error"
	ErrNotAuthenticated    ErrorCodes = "not_authenticated"
	ErrUserNotFound        ErrorCodes = "user_not_found"
)

// Defines values for Messages.
const (
	MsgBadRequest          Messages = "Bad request"
	MsgInternalServerError Messages = "Internal server error"
	MsgMissingFields       Messages = "Missing fields %v"
	MsgNotAuthenticated    Messages = "You are not authenticated"
	MsgNotConnected        Messages = "Not connected"
	MsgUserAlreadyExists   Messages = "User already exists"
	MsgUserNotAllowed      Messages = "User is not allowed to use ressource"
	MsgUserNotAvailable    Messages = "User cannot use ressource at the time being"
	MsgUserNotFound        Messages = "User not found"
)

// Defines values for StarTypes.
const (
	BronzeStar StarTypes = "bronze"
	GoldStar   StarTypes = "gold"
	SilverStar StarTypes = "silver"
)

// Defines values for UserRole.
const (
	UserAdmin     UserRole = "admin"
	UserFreshman  UserRole = "freshman"
	UserInte      UserRole = "inte"
	UserInteAdmin UserRole = "inte_admin"
	UserStudent   UserRole = "student"
)

// AddWish defines model for AddWish.
type AddWish struct {
	By GoogleId `json:"by" bson:"by"`

	// Freshmans A list of 5 ids sorted by order of interest
	Freshmans []GoogleId `json:"freshmans" bson:"freshmans"`
}

// CalendarDay defines model for CalendarDay.
type CalendarDay struct {
	Content *string `json:"content,omitempty" bson:"content"`
	Day     int     `json:"day" bson:"day"`
	Link    string  `json:"link" bson:"link"`
	Title   string  `json:"title" bson:"title"`

	// Type Types of a calendar's day
	Type CalendarDayTypes `json:"type" bson:"type"`
}

// CalendarDayTypes Types of a calendar's day
type CalendarDayTypes string

// CreateTeam defines model for CreateTeam.
type CreateTeam struct {
	Color string  `json:"color" bson:"color"`
	Name  *string `json:"name,omitempty" bson:"name"`
}

// ErrorCodes defines model for ErrorCodes.
type ErrorCodes string

// GoogleId defines model for GoogleId.
type GoogleId = string

// HTTPError defines model for HTTPError.
type HTTPError struct {
	ErrorCode ErrorCodes `json:"error_code" bson:"error_code"`
	Message   Messages   `json:"message" bson:"message"`
}

// Messages defines model for Messages.
type Messages string

// News defines model for News.
type News = string

// PatchStar defines model for PatchStar.
type PatchStar struct {
	Id      UUID    `json:"id" bson:"id"`
	Message *string `json:"message,omitempty" bson:"message"`

	// Type Types for the stars
	Type *StarTypes `json:"type,omitempty" bson:"type"`
}

// PatchUserById defines model for PatchUserById.
type PatchUserById struct {
	Discord  *string `json:"discord,omitempty" bson:"discord"`
	Facebook *string `json:"facebook,omitempty" bson:"facebook"`
	Hometown *string `json:"hometown,omitempty" bson:"hometown"`
	Points   *uint64 `json:"points,omitempty" bson:"points"`
	Spotify  *string `json:"spotify,omitempty" bson:"spotify"`
}

// PatchUserMe defines model for PatchUserMe.
type PatchUserMe struct {
	Discord  *string `json:"discord,omitempty" bson:"discord"`
	Facebook *string `json:"facebook,omitempty" bson:"facebook"`
	Hometown *string `json:"hometown,omitempty" bson:"hometown"`
	Spotify  *string `json:"spotify,omitempty" bson:"spotify"`
}

// PointsTransaction defines model for PointsTransaction.
type PointsTransaction struct {
	From   GoogleId `json:"from" bson:"from"`
	Id     UUID     `json:"id" bson:"id"`
	Points uint64   `json:"points" bson:"points"`
	To     GoogleId `json:"to" bson:"to"`
}

// PostCalendarDay defines model for PostCalendarDay.
type PostCalendarDay struct {
	Content *string `json:"content,omitempty" bson:"content"`
	Link    string  `json:"link" bson:"link"`
	Title   string  `json:"title" bson:"title"`

	// Type Types of a calendar's day
	Type CalendarDayTypes `json:"type" bson:"type"`
}

// PostPoints defines model for PostPoints.
type PostPoints struct {
	From   GoogleId `json:"from" bson:"from"`
	Points uint64   `json:"points" bson:"points"`
	To     GoogleId `json:"to" bson:"to"`
}

// PostStar defines model for PostStar.
type PostStar struct {
	From    string `json:"from" bson:"from"`
	Message string `json:"message" bson:"message"`
	To      string `json:"to" bson:"to"`

	// Type Types for the stars
	Type *StarTypes `json:"type,omitempty" bson:"type"`
}

// PostSuggestion defines model for PostSuggestion.
type PostSuggestion struct {
	By      GoogleId `json:"by" bson:"by"`
	Content string   `json:"content" bson:"content"`
	Title   string   `json:"title" bson:"title"`
}

// Star defines model for Star.
type Star struct {
	From    string `json:"from" bson:"from"`
	Id      UUID   `json:"id" bson:"id"`
	Message string `json:"message" bson:"message"`
	To      string `json:"to" bson:"to"`

	// Type Types for the stars
	Type    StarTypes `json:"type" bson:"type"`
	Upvotes *uint64   `json:"upvotes,omitempty" bson:"upvotes"`
}

// StarList defines model for StarList.
type StarList = []Star

// StarTypes Types for the stars
type StarTypes string

// Suggestion defines model for Suggestion.
type Suggestion struct {
	By       GoogleId `json:"by" bson:"by"`
	Content  string   `json:"content" bson:"content"`
	Id       UUID     `json:"id" bson:"id"`
	Reviewed bool     `json:"reviewed" bson:"reviewed"`
	Title    string   `json:"title" bson:"title"`
}

// Team A team of freshmans
type Team struct {
	Color   string     `json:"color" bson:"color"`
	Id      UUID       `json:"id" bson:"id"`
	Members []GoogleId `json:"members" bson:"members"`
	Name    string     `json:"name" bson:"name"`
	Points  uint64     `json:"points" bson:"points"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// User defines model for User.
type User struct {
	DeletedAt     *uint64   `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy     *string   `json:"deleted_by,omitempty" bson:"deleted_by"`
	Discord       *string   `json:"discord,omitempty" bson:"discord"`
	EmailAddress  string    `json:"email_address" bson:"email_address"`
	Facebook      *string   `json:"facebook,omitempty" bson:"facebook"`
	FirstName     string    `json:"first_name" bson:"first_name"`
	GoogleId      GoogleId  `json:"google_id" bson:"google_id"`
	GooglePicture *string   `json:"google_picture,omitempty" bson:"google_picture"`
	Hometown      *string   `json:"hometown,omitempty" bson:"hometown"`
	LastName      string    `json:"last_name" bson:"last_name"`
	Mentor        *GoogleId `json:"mentor,omitempty" bson:"mentor"`
	Points        uint64   `json:"points,omitempty" bson:"points"`

	// Role Role of the user
	Role       UserRole `json:"role,omitempty" bson:"role"`
	Spotify    *string   `json:"spotify,omitempty" bson:"spotify"`
	Stars      *StarList `json:"stars,omitempty" bson:"stars"`
	TeamPoints *uint64   `json:"team_points,omitempty" bson:"team_points"`
}

// UserRole Role of the user
type UserRole string

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// Code Google OAuth code
	Code string `form:"code" json:"code" bson:"code"`

	// State Google OAuth state
	State string `form:"state" json:"state" bson:"state"`
}

// ConnectParams defines parameters for Connect.
type ConnectParams struct {
	// R Redirect to this url after connecting
	R *string `form:"r,omitempty" json:"r,omitempty" bson:"r"`
}

// GetCalendarParams defines parameters for GetCalendar.
type GetCalendarParams struct {
	// StartDay The first day to get. If not mentionned starts on day 1
	StartDay *int `form:"start_day,omitempty" json:"start_day,omitempty" bson:"start_day"`

	// EndDay The last day to get. If not mentionned get all days from the first one
	EndDay *int `form:"end_day,omitempty" json:"end_day,omitempty" bson:"end_day"`
}

// PatchInstagramParams defines parameters for PatchInstagram.
type PatchInstagramParams struct {
	Instagram string `form:"instagram" json:"instagram" bson:"instagram"`
}

// GetMentoringFreshmansParams defines parameters for GetMentoringFreshmans.
type GetMentoringFreshmansParams struct {
	// Page page to get
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit number of users to get
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// Search search string
	Search *string `form:"search,omitempty" json:"search,omitempty" bson:"search"`
}

// DeleteNewsParams defines parameters for DeleteNews.
type DeleteNewsParams struct {
	Id UUID `form:"id" json:"id" bson:"id"`
}

// PostNewsJSONBody defines parameters for PostNews.
type PostNewsJSONBody struct {
	News News `json:"news" bson:"news"`
}

// DeletePointsParams defines parameters for DeletePoints.
type DeletePointsParams struct {
	Id UUID `form:"id" json:"id" bson:"id"`
}

// GetPointsTransactionsParams defines parameters for GetPointsTransactions.
type GetPointsTransactionsParams struct {
	// Page page to get
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit number of users to get
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// DeleteStarByIdParams defines parameters for DeleteStarById.
type DeleteStarByIdParams struct {
	// StarId ID of the star
	StarId UUID `form:"star_id" json:"star_id" bson:"star_id"`
}

// GetStarsParams defines parameters for GetStars.
type GetStarsParams struct {
	// Page page to get
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit number of users to get
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// From search stars from a specific user
	From *string `form:"from,omitempty" json:"from,omitempty" bson:"from"`

	// To search stars to a specific user
	To *string `form:"to,omitempty" json:"to,omitempty" bson:"to"`
}

// PostUserStarsByIdParams defines parameters for PostUserStarsById.
type PostUserStarsByIdParams struct {
	// UserId ID of the user
	UserId GoogleId `form:"user_id" json:"user_id" bson:"user_id"`
}

// DeleteSuggestionParams defines parameters for DeleteSuggestion.
type DeleteSuggestionParams struct {
	Id UUID `form:"id" json:"id" bson:"id"`
}

// GetSuggestionsParams defines parameters for GetSuggestions.
type GetSuggestionsParams struct {
	// Page page to get
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit number of suggestions to get
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// PatchSuggestionParams defines parameters for PatchSuggestion.
type PatchSuggestionParams struct {
	Id UUID `form:"id" json:"id" bson:"id"`
}

// AddUserTeamJSONBody defines parameters for AddUserTeam.
type AddUserTeamJSONBody = []GoogleId

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Page page to get
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit number of users to get
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// Search search string
	Search *string `form:"search,omitempty" json:"search,omitempty" bson:"search"`
}

// AppendCalendarDayJSONRequestBody defines body for AppendCalendarDay for application/json ContentType.
type AppendCalendarDayJSONRequestBody = PostCalendarDay

// PostCalendarDayJSONRequestBody defines body for PostCalendarDay for application/json ContentType.
type PostCalendarDayJSONRequestBody = PostCalendarDay

// AddWishJSONRequestBody defines body for AddWish for application/json ContentType.
type AddWishJSONRequestBody = AddWish

// PostNewsJSONRequestBody defines body for PostNews for application/json ContentType.
type PostNewsJSONRequestBody PostNewsJSONBody

// AddPointsJSONRequestBody defines body for AddPoints for application/json ContentType.
type AddPointsJSONRequestBody = PostPoints

// EditStarJSONRequestBody defines body for EditStar for application/json ContentType.
type EditStarJSONRequestBody = PatchStar

// PostUserStarsByIdJSONRequestBody defines body for PostUserStarsById for application/json ContentType.
type PostUserStarsByIdJSONRequestBody = PostStar

// PostSuggestionJSONRequestBody defines body for PostSuggestion for application/json ContentType.
type PostSuggestionJSONRequestBody = PostSuggestion

// PostTeamJSONRequestBody defines body for PostTeam for application/json ContentType.
type PostTeamJSONRequestBody = CreateTeam

// AddUserTeamJSONRequestBody defines body for AddUserTeam for application/json ContentType.
type AddUserTeamJSONRequestBody = AddUserTeamJSONBody

// PatchUserMeJSONRequestBody defines body for PatchUserMe for application/json ContentType.
type PatchUserMeJSONRequestBody = PatchUserMe

// PatchUserByIdJSONRequestBody defines body for PatchUserById for application/json ContentType.
type PatchUserByIdJSONRequestBody = PatchUserById

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /auth/callback)
	Callback(ctx echo.Context, params CallbackParams) error

	// (GET /auth/login)
	Connect(ctx echo.Context, params ConnectParams) error

	// (GET /auth/logout)
	Logout(ctx echo.Context) error

	// (DELETE /calendar)
	DeleteCalendar(ctx echo.Context) error

	// (GET /calendar)
	GetCalendar(ctx echo.Context, params GetCalendarParams) error

	// (POST /calendar)
	AppendCalendarDay(ctx echo.Context) error

	// (DELETE /calendar/{day})
	DeleteCalendarDay(ctx echo.Context, day int) error

	// (GET /calendar/{day})
	GetCalendarDay(ctx echo.Context, day int) error

	// (POST /calendar/{day})
	PostCalendarDay(ctx echo.Context, day int) error

	// (GET /daily)
	CheckDaily(ctx echo.Context) error

	// (POST /daily)
	PlayDaily(ctx echo.Context) error

	// (GET /instagram)
	GetInstagram(ctx echo.Context) error

	// (PATCH /instagram)
	PatchInstagram(ctx echo.Context, params PatchInstagramParams) error

	// (GET /mentoring)
	GetMentoringProcess(ctx echo.Context) error

	// (PATCH /mentoring)
	ToggleMentoringProcess(ctx echo.Context) error

	// (GET /mentoring/freshman)
	GetMentoringFreshmans(ctx echo.Context, params GetMentoringFreshmansParams) error

	// (POST /mentoring/step)
	StartAssociation(ctx echo.Context) error

	// (GET /mentoring/wish)
	GetWish(ctx echo.Context) error

	// (POST /mentoring/wish)
	AddWish(ctx echo.Context) error

	// (DELETE /news)
	DeleteNews(ctx echo.Context, params DeleteNewsParams) error

	// (GET /news)
	GetNews(ctx echo.Context) error

	// (POST /news)
	PostNews(ctx echo.Context) error

	// (DELETE /points)
	DeletePoints(ctx echo.Context, params DeletePointsParams) error

	// (GET /points)
	GetPointsTransactions(ctx echo.Context, params GetPointsTransactionsParams) error

	// (POST /points)
	AddPoints(ctx echo.Context) error

	// (DELETE /star)
	DeleteStarById(ctx echo.Context, params DeleteStarByIdParams) error

	// (GET /star)
	GetStars(ctx echo.Context, params GetStarsParams) error

	// (PATCH /star)
	EditStar(ctx echo.Context) error

	// (POST /star)
	PostUserStarsById(ctx echo.Context, params PostUserStarsByIdParams) error

	// (PATCH /star/{star_id}/upvote)
	PatchStarUpvote(ctx echo.Context, starId UUID) error

	// (POST /star/{star_id}/validate)
	PostStarValidation(ctx echo.Context, starId UUID) error

	// (DELETE /suggestion)
	DeleteSuggestion(ctx echo.Context, params DeleteSuggestionParams) error

	// (GET /suggestion)
	GetSuggestions(ctx echo.Context, params GetSuggestionsParams) error

	// (PATCH /suggestion)
	PatchSuggestion(ctx echo.Context, params PatchSuggestionParams) error

	// (POST /suggestion)
	PostSuggestion(ctx echo.Context) error

	// (GET /team)
	GetTeam(ctx echo.Context) error

	// (POST /team)
	PostTeam(ctx echo.Context) error

	// (DELETE /team/{id})
	DeleteTeam(ctx echo.Context, id UUID) error

	// (GET /team/{id})
	GetTeamById(ctx echo.Context, id UUID) error

	// (POST /team/{id})
	AddUserTeam(ctx echo.Context, id UUID) error

	// (GET /user)
	GetUsers(ctx echo.Context, params GetUsersParams) error

	// (GET /user/me)
	GetUserMe(ctx echo.Context) error

	// (PATCH /user/me)
	PatchUserMe(ctx echo.Context) error

	// (GET /user/{user_id})
	GetUserById(ctx echo.Context, userId GoogleId) error

	// (PATCH /user/{user_id})
	PatchUserById(ctx echo.Context, userId GoogleId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface `bson:"handler"`
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Callback(ctx, params)
	return err
}

// Connect converts echo context to params.
func (w *ServerInterfaceWrapper) Connect(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConnectParams
	// ------------- Optional query parameter "r" -------------

	err = runtime.BindQueryParameter("form", true, false, "r", ctx.QueryParams(), &params.R)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter r: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Connect(ctx, params)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// DeleteCalendar converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCalendar(ctx echo.Context) error {
	var err error

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCalendar(ctx)
	return err
}

// GetCalendar converts echo context to params.
func (w *ServerInterfaceWrapper) GetCalendar(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCalendarParams
	// ------------- Optional query parameter "start_day" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_day", ctx.QueryParams(), &params.StartDay)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_day: %s", err))
	}

	// ------------- Optional query parameter "end_day" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_day", ctx.QueryParams(), &params.EndDay)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_day: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCalendar(ctx, params)
	return err
}

// AppendCalendarDay converts echo context to params.
func (w *ServerInterfaceWrapper) AppendCalendarDay(ctx echo.Context) error {
	var err error

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendCalendarDay(ctx)
	return err
}

// DeleteCalendarDay converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCalendarDay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "day" -------------
	var day int

	err = runtime.BindStyledParameterWithLocation("simple", false, "day", runtime.ParamLocationPath, ctx.Param("day"), &day)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCalendarDay(ctx, day)
	return err
}

// GetCalendarDay converts echo context to params.
func (w *ServerInterfaceWrapper) GetCalendarDay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "day" -------------
	var day int

	err = runtime.BindStyledParameterWithLocation("simple", false, "day", runtime.ParamLocationPath, ctx.Param("day"), &day)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCalendarDay(ctx, day)
	return err
}

// PostCalendarDay converts echo context to params.
func (w *ServerInterfaceWrapper) PostCalendarDay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "day" -------------
	var day int

	err = runtime.BindStyledParameterWithLocation("simple", false, "day", runtime.ParamLocationPath, ctx.Param("day"), &day)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCalendarDay(ctx, day)
	return err
}

// CheckDaily converts echo context to params.
func (w *ServerInterfaceWrapper) CheckDaily(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CheckDaily(ctx)
	return err
}

// PlayDaily converts echo context to params.
func (w *ServerInterfaceWrapper) PlayDaily(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PlayDaily(ctx)
	return err
}

// GetInstagram converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstagram(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstagram(ctx)
	return err
}

// PatchInstagram converts echo context to params.
func (w *ServerInterfaceWrapper) PatchInstagram(ctx echo.Context) error {
	var err error

	ctx.Set(Inte_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchInstagramParams
	// ------------- Required query parameter "instagram" -------------

	err = runtime.BindQueryParameter("form", true, true, "instagram", ctx.QueryParams(), &params.Instagram)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instagram: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchInstagram(ctx, params)
	return err
}

// GetMentoringProcess converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentoringProcess(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMentoringProcess(ctx)
	return err
}

// ToggleMentoringProcess converts echo context to params.
func (w *ServerInterfaceWrapper) ToggleMentoringProcess(ctx echo.Context) error {
	var err error

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ToggleMentoringProcess(ctx)
	return err
}

// GetMentoringFreshmans converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentoringFreshmans(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentoringFreshmansParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMentoringFreshmans(ctx, params)
	return err
}

// StartAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) StartAssociation(ctx echo.Context) error {
	var err error

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartAssociation(ctx)
	return err
}

// GetWish converts echo context to params.
func (w *ServerInterfaceWrapper) GetWish(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWish(ctx)
	return err
}

// AddWish converts echo context to params.
func (w *ServerInterfaceWrapper) AddWish(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddWish(ctx)
	return err
}

// DeleteNews converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNews(ctx echo.Context) error {
	var err error

	ctx.Set(Inte_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteNewsParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteNews(ctx, params)
	return err
}

// GetNews converts echo context to params.
func (w *ServerInterfaceWrapper) GetNews(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNews(ctx)
	return err
}

// PostNews converts echo context to params.
func (w *ServerInterfaceWrapper) PostNews(ctx echo.Context) error {
	var err error

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNews(ctx)
	return err
}

// DeletePoints converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePoints(ctx echo.Context) error {
	var err error

	ctx.Set(Inte_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletePointsParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePoints(ctx, params)
	return err
}

// GetPointsTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPointsTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Inte_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPointsTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPointsTransactions(ctx, params)
	return err
}

// AddPoints converts echo context to params.
func (w *ServerInterfaceWrapper) AddPoints(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddPoints(ctx)
	return err
}

// DeleteStarById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStarById(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteStarByIdParams
	// ------------- Required query parameter "star_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "star_id", ctx.QueryParams(), &params.StarId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter star_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteStarById(ctx, params)
	return err
}

// GetStars converts echo context to params.
func (w *ServerInterfaceWrapper) GetStars(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStarsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStars(ctx, params)
	return err
}

// EditStar converts echo context to params.
func (w *ServerInterfaceWrapper) EditStar(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditStar(ctx)
	return err
}

// PostUserStarsById converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserStarsById(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUserStarsByIdParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUserStarsById(ctx, params)
	return err
}

// PatchStarUpvote converts echo context to params.
func (w *ServerInterfaceWrapper) PatchStarUpvote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "star_id" -------------
	var starId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "star_id", runtime.ParamLocationPath, ctx.Param("star_id"), &starId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter star_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchStarUpvote(ctx, starId)
	return err
}

// PostStarValidation converts echo context to params.
func (w *ServerInterfaceWrapper) PostStarValidation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "star_id" -------------
	var starId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "star_id", runtime.ParamLocationPath, ctx.Param("star_id"), &starId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter star_id: %s", err))
	}

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStarValidation(ctx, starId)
	return err
}

// DeleteSuggestion converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSuggestion(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSuggestionParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSuggestion(ctx, params)
	return err
}

// GetSuggestions converts echo context to params.
func (w *ServerInterfaceWrapper) GetSuggestions(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSuggestionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSuggestions(ctx, params)
	return err
}

// PatchSuggestion converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSuggestion(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchSuggestionParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSuggestion(ctx, params)
	return err
}

// PostSuggestion converts echo context to params.
func (w *ServerInterfaceWrapper) PostSuggestion(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSuggestion(ctx)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTeam(ctx)
	return err
}

// PostTeam converts echo context to params.
func (w *ServerInterfaceWrapper) PostTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTeam(ctx)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTeam(ctx, id)
	return err
}

// GetTeamById converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeamById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTeamById(ctx, id)
	return err
}

// AddUserTeam converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Inte_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserTeam(ctx, id)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// GetUserMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserMe(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserMe(ctx)
	return err
}

// PatchUserMe converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserMe(ctx echo.Context) error {
	var err error

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUserMe(ctx)
	return err
}

// GetUserById converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId GoogleId

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(Std_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserById(ctx, userId)
	return err
}

// PatchUserById converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId GoogleId

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUserById(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/callback", wrapper.Callback)
	router.GET(baseURL+"/auth/login", wrapper.Connect)
	router.GET(baseURL+"/auth/logout", wrapper.Logout)
	router.DELETE(baseURL+"/calendar", wrapper.DeleteCalendar)
	router.GET(baseURL+"/calendar", wrapper.GetCalendar)
	router.POST(baseURL+"/calendar", wrapper.AppendCalendarDay)
	router.DELETE(baseURL+"/calendar/:day", wrapper.DeleteCalendarDay)
	router.GET(baseURL+"/calendar/:day", wrapper.GetCalendarDay)
	router.POST(baseURL+"/calendar/:day", wrapper.PostCalendarDay)
	router.GET(baseURL+"/daily", wrapper.CheckDaily)
	router.POST(baseURL+"/daily", wrapper.PlayDaily)
	router.GET(baseURL+"/instagram", wrapper.GetInstagram)
	router.PATCH(baseURL+"/instagram", wrapper.PatchInstagram)
	router.GET(baseURL+"/mentoring", wrapper.GetMentoringProcess)
	router.PATCH(baseURL+"/mentoring", wrapper.ToggleMentoringProcess)
	router.GET(baseURL+"/mentoring/freshman", wrapper.GetMentoringFreshmans)
	router.POST(baseURL+"/mentoring/step", wrapper.StartAssociation)
	router.GET(baseURL+"/mentoring/wish", wrapper.GetWish)
	router.POST(baseURL+"/mentoring/wish", wrapper.AddWish)
	router.DELETE(baseURL+"/news", wrapper.DeleteNews)
	router.GET(baseURL+"/news", wrapper.GetNews)
	router.POST(baseURL+"/news", wrapper.PostNews)
	router.DELETE(baseURL+"/points", wrapper.DeletePoints)
	router.GET(baseURL+"/points", wrapper.GetPointsTransactions)
	router.POST(baseURL+"/points", wrapper.AddPoints)
	router.DELETE(baseURL+"/star", wrapper.DeleteStarById)
	router.GET(baseURL+"/star", wrapper.GetStars)
	router.PATCH(baseURL+"/star", wrapper.EditStar)
	router.POST(baseURL+"/star", wrapper.PostUserStarsById)
	router.PATCH(baseURL+"/star/:star_id/upvote", wrapper.PatchStarUpvote)
	router.POST(baseURL+"/star/:star_id/validate", wrapper.PostStarValidation)
	router.DELETE(baseURL+"/suggestion", wrapper.DeleteSuggestion)
	router.GET(baseURL+"/suggestion", wrapper.GetSuggestions)
	router.PATCH(baseURL+"/suggestion", wrapper.PatchSuggestion)
	router.POST(baseURL+"/suggestion", wrapper.PostSuggestion)
	router.GET(baseURL+"/team", wrapper.GetTeam)
	router.POST(baseURL+"/team", wrapper.PostTeam)
	router.DELETE(baseURL+"/team/:id", wrapper.DeleteTeam)
	router.GET(baseURL+"/team/:id", wrapper.GetTeamById)
	router.POST(baseURL+"/team/:id", wrapper.AddUserTeam)
	router.GET(baseURL+"/user", wrapper.GetUsers)
	router.GET(baseURL+"/user/me", wrapper.GetUserMe)
	router.PATCH(baseURL+"/user/me", wrapper.PatchUserMe)
	router.GET(baseURL+"/user/:user_id", wrapper.GetUserById)
	router.PATCH(baseURL+"/user/:user_id", wrapper.PatchUserById)

}

type CallbackRequestObject struct {
	Params CallbackParams `bson:"params"`
}

type CallbackResponseObject interface {
	VisitCallbackResponse(w http.ResponseWriter) error
}

type Callback301ResponseHeaders struct {
	Location string `bson:"location"`
}

type Callback301Response struct {
	Headers Callback301ResponseHeaders `bson:"headers"`
}

func (response Callback301Response) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type Callback500JSONResponse HTTPError

func (response Callback500JSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConnectRequestObject struct {
	Params ConnectParams `bson:"params"`
}

type ConnectResponseObject interface {
	VisitConnectResponse(w http.ResponseWriter) error
}

type Connect301ResponseHeaders struct {
	Location string `bson:"location"`
}

type Connect301Response struct {
	Headers Connect301ResponseHeaders `bson:"headers"`
}

func (response Connect301Response) VisitConnectResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type Connect400JSONResponse HTTPError

func (response Connect400JSONResponse) VisitConnectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Connect500JSONResponse HTTPError

func (response Connect500JSONResponse) VisitConnectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401JSONResponse HTTPError

func (response Logout401JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Logout500JSONResponse HTTPError

func (response Logout500JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCalendarRequestObject struct {
}

type DeleteCalendarResponseObject interface {
	VisitDeleteCalendarResponse(w http.ResponseWriter) error
}

type DeleteCalendar204Response struct {
}

func (response DeleteCalendar204Response) VisitDeleteCalendarResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCalendar401JSONResponse HTTPError

func (response DeleteCalendar401JSONResponse) VisitDeleteCalendarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCalendar500JSONResponse HTTPError

func (response DeleteCalendar500JSONResponse) VisitDeleteCalendarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCalendarRequestObject struct {
	Params GetCalendarParams `bson:"params"`
}

type GetCalendarResponseObject interface {
	VisitGetCalendarResponse(w http.ResponseWriter) error
}

type GetCalendar200JSONResponse struct {
	Calendar []CalendarDay `json:"calendar" bson:"calendar"`

	// CalendarLen The len of the array returned
	CalendarLen int `json:"calendar_len" bson:"calendar_len"`

	// MaxDay The numbers of days in the calendar
	MaxDay  int       `json:"max_day" bson:"max_day"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response GetCalendar200JSONResponse) VisitGetCalendarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCalendar400JSONResponse HTTPError

func (response GetCalendar400JSONResponse) VisitGetCalendarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCalendar401JSONResponse HTTPError

func (response GetCalendar401JSONResponse) VisitGetCalendarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCalendar500JSONResponse HTTPError

func (response GetCalendar500JSONResponse) VisitGetCalendarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AppendCalendarDayRequestObject struct {
	Body *AppendCalendarDayJSONRequestBody `bson:"body"`
}

type AppendCalendarDayResponseObject interface {
	VisitAppendCalendarDayResponse(w http.ResponseWriter) error
}

type AppendCalendarDay204Response struct {
}

func (response AppendCalendarDay204Response) VisitAppendCalendarDayResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AppendCalendarDay400JSONResponse HTTPError

func (response AppendCalendarDay400JSONResponse) VisitAppendCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AppendCalendarDay401JSONResponse HTTPError

func (response AppendCalendarDay401JSONResponse) VisitAppendCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AppendCalendarDay500JSONResponse HTTPError

func (response AppendCalendarDay500JSONResponse) VisitAppendCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCalendarDayRequestObject struct {
	Day int `json:"day" bson:"day"`
}

type DeleteCalendarDayResponseObject interface {
	VisitDeleteCalendarDayResponse(w http.ResponseWriter) error
}

type DeleteCalendarDay204Response struct {
}

func (response DeleteCalendarDay204Response) VisitDeleteCalendarDayResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCalendarDay401JSONResponse HTTPError

func (response DeleteCalendarDay401JSONResponse) VisitDeleteCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCalendarDay404JSONResponse HTTPError

func (response DeleteCalendarDay404JSONResponse) VisitDeleteCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCalendarDay500JSONResponse HTTPError

func (response DeleteCalendarDay500JSONResponse) VisitDeleteCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCalendarDayRequestObject struct {
	Day int `json:"day" bson:"day"`
}

type GetCalendarDayResponseObject interface {
	VisitGetCalendarDayResponse(w http.ResponseWriter) error
}

type GetCalendarDay200JSONResponse struct {
	Day CalendarDay `json:"day" bson:"day"`

	// MaxDay The numbers of days in the calendar
	MaxDay  int       `json:"max_day" bson:"max_day"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response GetCalendarDay200JSONResponse) VisitGetCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCalendarDay401JSONResponse HTTPError

func (response GetCalendarDay401JSONResponse) VisitGetCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCalendarDay404JSONResponse HTTPError

func (response GetCalendarDay404JSONResponse) VisitGetCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCalendarDay500JSONResponse HTTPError

func (response GetCalendarDay500JSONResponse) VisitGetCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostCalendarDayRequestObject struct {
	Day  int                             `json:"day" bson:"day"`
	Body *PostCalendarDayJSONRequestBody `bson:"body"`
}

type PostCalendarDayResponseObject interface {
	VisitPostCalendarDayResponse(w http.ResponseWriter) error
}

type PostCalendarDay204Response struct {
}

func (response PostCalendarDay204Response) VisitPostCalendarDayResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostCalendarDay400JSONResponse HTTPError

func (response PostCalendarDay400JSONResponse) VisitPostCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCalendarDay401JSONResponse HTTPError

func (response PostCalendarDay401JSONResponse) VisitPostCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostCalendarDay500JSONResponse HTTPError

func (response PostCalendarDay500JSONResponse) VisitPostCalendarDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CheckDailyRequestObject struct {
}

type CheckDailyResponseObject interface {
	VisitCheckDailyResponse(w http.ResponseWriter) error
}

type CheckDaily200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	Status  bool      `json:"status" bson:"status"`
}

func (response CheckDaily200JSONResponse) VisitCheckDailyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CheckDaily401JSONResponse HTTPError

func (response CheckDaily401JSONResponse) VisitCheckDailyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CheckDaily500JSONResponse HTTPError

func (response CheckDaily500JSONResponse) VisitCheckDailyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PlayDailyRequestObject struct {
}

type PlayDailyResponseObject interface {
	VisitPlayDailyResponse(w http.ResponseWriter) error
}

type PlayDaily200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	Points  uint64    `json:"points" bson:"points"`
}

func (response PlayDaily200JSONResponse) VisitPlayDailyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PlayDaily401JSONResponse HTTPError

func (response PlayDaily401JSONResponse) VisitPlayDailyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PlayDaily403JSONResponse HTTPError

func (response PlayDaily403JSONResponse) VisitPlayDailyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PlayDaily500JSONResponse HTTPError

func (response PlayDaily500JSONResponse) VisitPlayDailyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetInstagramRequestObject struct {
}

type GetInstagramResponseObject interface {
	VisitGetInstagramResponse(w http.ResponseWriter) error
}

type GetInstagram200JSONResponse struct {
	Instagram string    `json:"instagram" bson:"instagram"`
	Message   *Messages `json:"message,omitempty" bson:"message"`
}

func (response GetInstagram200JSONResponse) VisitGetInstagramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInstagram401JSONResponse HTTPError

func (response GetInstagram401JSONResponse) VisitGetInstagramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetInstagram500JSONResponse HTTPError

func (response GetInstagram500JSONResponse) VisitGetInstagramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchInstagramRequestObject struct {
	Params PatchInstagramParams `bson:"params"`
}

type PatchInstagramResponseObject interface {
	VisitPatchInstagramResponse(w http.ResponseWriter) error
}

type PatchInstagram204Response struct {
}

func (response PatchInstagram204Response) VisitPatchInstagramResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PatchInstagram401JSONResponse HTTPError

func (response PatchInstagram401JSONResponse) VisitPatchInstagramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchInstagram500JSONResponse HTTPError

func (response PatchInstagram500JSONResponse) VisitPatchInstagramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMentoringProcessRequestObject struct {
}

type GetMentoringProcessResponseObject interface {
	VisitGetMentoringProcessResponse(w http.ResponseWriter) error
}

type GetMentoringProcess200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	Status  bool      `json:"status" bson:"status"`
}

func (response GetMentoringProcess200JSONResponse) VisitGetMentoringProcessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMentoringProcess401JSONResponse HTTPError

func (response GetMentoringProcess401JSONResponse) VisitGetMentoringProcessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMentoringProcess500JSONResponse HTTPError

func (response GetMentoringProcess500JSONResponse) VisitGetMentoringProcessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ToggleMentoringProcessRequestObject struct {
}

type ToggleMentoringProcessResponseObject interface {
	VisitToggleMentoringProcessResponse(w http.ResponseWriter) error
}

type ToggleMentoringProcess204Response struct {
}

func (response ToggleMentoringProcess204Response) VisitToggleMentoringProcessResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ToggleMentoringProcess401JSONResponse HTTPError

func (response ToggleMentoringProcess401JSONResponse) VisitToggleMentoringProcessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ToggleMentoringProcess500JSONResponse HTTPError

func (response ToggleMentoringProcess500JSONResponse) VisitToggleMentoringProcessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMentoringFreshmansRequestObject struct {
	Params GetMentoringFreshmansParams `bson:"params"`
}

type GetMentoringFreshmansResponseObject interface {
	VisitGetMentoringFreshmansResponse(w http.ResponseWriter) error
}

type GetMentoringFreshmans200JSONResponse struct {
	Limit   uint64    `json:"limit" bson:"limit"`
	MaxPage uint64    `json:"max_page" bson:"max_page"`
	Message *Messages `json:"message,omitempty" bson:"message"`
	Page    uint64    `json:"page" bson:"page"`
	Users   []User    `json:"users" bson:"users"`
}

func (response GetMentoringFreshmans200JSONResponse) VisitGetMentoringFreshmansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMentoringFreshmans400JSONResponse HTTPError

func (response GetMentoringFreshmans400JSONResponse) VisitGetMentoringFreshmansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMentoringFreshmans401JSONResponse HTTPError

func (response GetMentoringFreshmans401JSONResponse) VisitGetMentoringFreshmansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMentoringFreshmans500JSONResponse HTTPError

func (response GetMentoringFreshmans500JSONResponse) VisitGetMentoringFreshmansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StartAssociationRequestObject struct {
}

type StartAssociationResponseObject interface {
	VisitStartAssociationResponse(w http.ResponseWriter) error
}

type StartAssociation202Response struct {
}

func (response StartAssociation202Response) VisitStartAssociationResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type StartAssociation204Response struct {
}

func (response StartAssociation204Response) VisitStartAssociationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type StartAssociation401JSONResponse HTTPError

func (response StartAssociation401JSONResponse) VisitStartAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type StartAssociation403JSONResponse HTTPError

func (response StartAssociation403JSONResponse) VisitStartAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StartAssociation500JSONResponse HTTPError

func (response StartAssociation500JSONResponse) VisitStartAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWishRequestObject struct {
}

type GetWishResponseObject interface {
	VisitGetWishResponse(w http.ResponseWriter) error
}

type GetWish200JSONResponse struct {
	Freshmans []User    `json:"freshmans" bson:"freshmans"`
	Message   *Messages `json:"message,omitempty" bson:"message"`
}

func (response GetWish200JSONResponse) VisitGetWishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWish401JSONResponse HTTPError

func (response GetWish401JSONResponse) VisitGetWishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetWish500JSONResponse HTTPError

func (response GetWish500JSONResponse) VisitGetWishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddWishRequestObject struct {
	Body *AddWishJSONRequestBody `bson:"body"`
}

type AddWishResponseObject interface {
	VisitAddWishResponse(w http.ResponseWriter) error
}

type AddWish204Response struct {
}

func (response AddWish204Response) VisitAddWishResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AddWish401JSONResponse HTTPError

func (response AddWish401JSONResponse) VisitAddWishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddWish403JSONResponse HTTPError

func (response AddWish403JSONResponse) VisitAddWishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddWish500JSONResponse HTTPError

func (response AddWish500JSONResponse) VisitAddWishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNewsRequestObject struct {
	Params DeleteNewsParams `bson:"params"`
}

type DeleteNewsResponseObject interface {
	VisitDeleteNewsResponse(w http.ResponseWriter) error
}

type DeleteNews204Response struct {
}

func (response DeleteNews204Response) VisitDeleteNewsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteNews401JSONResponse HTTPError

func (response DeleteNews401JSONResponse) VisitDeleteNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNews404JSONResponse HTTPError

func (response DeleteNews404JSONResponse) VisitDeleteNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNews500JSONResponse HTTPError

func (response DeleteNews500JSONResponse) VisitDeleteNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNewsRequestObject struct {
}

type GetNewsResponseObject interface {
	VisitGetNewsResponse(w http.ResponseWriter) error
}

type GetNews200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	News    []News    `json:"news" bson:"news"`
}

func (response GetNews200JSONResponse) VisitGetNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNews401JSONResponse HTTPError

func (response GetNews401JSONResponse) VisitGetNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetNews500JSONResponse HTTPError

func (response GetNews500JSONResponse) VisitGetNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostNewsRequestObject struct {
	Body *PostNewsJSONRequestBody `bson:"body"`
}

type PostNewsResponseObject interface {
	VisitPostNewsResponse(w http.ResponseWriter) error
}

type PostNews204Response struct {
}

func (response PostNews204Response) VisitPostNewsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostNews401JSONResponse HTTPError

func (response PostNews401JSONResponse) VisitPostNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostNews500JSONResponse HTTPError

func (response PostNews500JSONResponse) VisitPostNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePointsRequestObject struct {
	Params DeletePointsParams `bson:"params"`
}

type DeletePointsResponseObject interface {
	VisitDeletePointsResponse(w http.ResponseWriter) error
}

type DeletePoints204Response struct {
}

func (response DeletePoints204Response) VisitDeletePointsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePoints400JSONResponse HTTPError

func (response DeletePoints400JSONResponse) VisitDeletePointsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePoints401JSONResponse HTTPError

func (response DeletePoints401JSONResponse) VisitDeletePointsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeletePoints404JSONResponse HTTPError

func (response DeletePoints404JSONResponse) VisitDeletePointsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePoints500JSONResponse HTTPError

func (response DeletePoints500JSONResponse) VisitDeletePointsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPointsTransactionsRequestObject struct {
	Params GetPointsTransactionsParams `bson:"params"`
}

type GetPointsTransactionsResponseObject interface {
	VisitGetPointsTransactionsResponse(w http.ResponseWriter) error
}

type GetPointsTransactions200JSONResponse struct {
	Limit        uint64              `json:"limit" bson:"limit"`
	MaxPage      uint64              `json:"max_page" bson:"max_page"`
	Message      *Messages           `json:"message,omitempty" bson:"message"`
	Page         uint64              `json:"page" bson:"page"`
	Transactions []PointsTransaction `json:"transactions" bson:"transactions"`
}

func (response GetPointsTransactions200JSONResponse) VisitGetPointsTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPointsTransactions400JSONResponse HTTPError

func (response GetPointsTransactions400JSONResponse) VisitGetPointsTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPointsTransactions401JSONResponse HTTPError

func (response GetPointsTransactions401JSONResponse) VisitGetPointsTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPointsTransactions500JSONResponse HTTPError

func (response GetPointsTransactions500JSONResponse) VisitGetPointsTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddPointsRequestObject struct {
	Body *AddPointsJSONRequestBody `bson:"body"`
}

type AddPointsResponseObject interface {
	VisitAddPointsResponse(w http.ResponseWriter) error
}

type AddPoints204Response struct {
}

func (response AddPoints204Response) VisitAddPointsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AddPoints400JSONResponse HTTPError

func (response AddPoints400JSONResponse) VisitAddPointsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddPoints401JSONResponse HTTPError

func (response AddPoints401JSONResponse) VisitAddPointsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddPoints500JSONResponse HTTPError

func (response AddPoints500JSONResponse) VisitAddPointsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarByIdRequestObject struct {
	Params DeleteStarByIdParams `bson:"params"`
}

type DeleteStarByIdResponseObject interface {
	VisitDeleteStarByIdResponse(w http.ResponseWriter) error
}

type DeleteStarById204Response struct {
}

func (response DeleteStarById204Response) VisitDeleteStarByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteStarById401JSONResponse HTTPError

func (response DeleteStarById401JSONResponse) VisitDeleteStarByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarById403JSONResponse HTTPError

func (response DeleteStarById403JSONResponse) VisitDeleteStarByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarById404JSONResponse HTTPError

func (response DeleteStarById404JSONResponse) VisitDeleteStarByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarById409JSONResponse HTTPError

func (response DeleteStarById409JSONResponse) VisitDeleteStarByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarById500JSONResponse HTTPError

func (response DeleteStarById500JSONResponse) VisitDeleteStarByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStarsRequestObject struct {
	Params GetStarsParams `bson:"params"`
}

type GetStarsResponseObject interface {
	VisitGetStarsResponse(w http.ResponseWriter) error
}

type GetStars200JSONResponse struct {
	Limit   uint64    `json:"limit" bson:"limit"`
	MaxPage uint64    `json:"max_page" bson:"max_page"`
	Message *Messages `json:"message,omitempty" bson:"message"`
	Page    uint64    `json:"page" bson:"page"`
	Stars   StarList  `json:"stars" bson:"stars"`
}

func (response GetStars200JSONResponse) VisitGetStarsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStars400JSONResponse HTTPError

func (response GetStars400JSONResponse) VisitGetStarsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetStars401JSONResponse HTTPError

func (response GetStars401JSONResponse) VisitGetStarsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetStars500JSONResponse HTTPError

func (response GetStars500JSONResponse) VisitGetStarsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type EditStarRequestObject struct {
	Body *EditStarJSONRequestBody `bson:"body"`
}

type EditStarResponseObject interface {
	VisitEditStarResponse(w http.ResponseWriter) error
}

type EditStar204Response struct {
}

func (response EditStar204Response) VisitEditStarResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type EditStar400JSONResponse HTTPError

func (response EditStar400JSONResponse) VisitEditStarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EditStar401JSONResponse HTTPError

func (response EditStar401JSONResponse) VisitEditStarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type EditStar500JSONResponse HTTPError

func (response EditStar500JSONResponse) VisitEditStarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUserStarsByIdRequestObject struct {
	Params PostUserStarsByIdParams           `bson:"params"`
	Body   *PostUserStarsByIdJSONRequestBody `bson:"body"`
}

type PostUserStarsByIdResponseObject interface {
	VisitPostUserStarsByIdResponse(w http.ResponseWriter) error
}

type PostUserStarsById204Response struct {
}

func (response PostUserStarsById204Response) VisitPostUserStarsByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostUserStarsById401JSONResponse HTTPError

func (response PostUserStarsById401JSONResponse) VisitPostUserStarsByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostUserStarsById403JSONResponse HTTPError

func (response PostUserStarsById403JSONResponse) VisitPostUserStarsByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostUserStarsById404JSONResponse HTTPError

func (response PostUserStarsById404JSONResponse) VisitPostUserStarsByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUserStarsById500JSONResponse HTTPError

func (response PostUserStarsById500JSONResponse) VisitPostUserStarsByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarUpvoteRequestObject struct {
	StarId UUID `json:"star_id" bson:"star_id"`
}

type PatchStarUpvoteResponseObject interface {
	VisitPatchStarUpvoteResponse(w http.ResponseWriter) error
}

type PatchStarUpvote200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	Upvoted bool      `json:"upvoted" bson:"upvoted"`
}

func (response PatchStarUpvote200JSONResponse) VisitPatchStarUpvoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarUpvote401JSONResponse HTTPError

func (response PatchStarUpvote401JSONResponse) VisitPatchStarUpvoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarUpvote403JSONResponse HTTPError

func (response PatchStarUpvote403JSONResponse) VisitPatchStarUpvoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarUpvote404JSONResponse HTTPError

func (response PatchStarUpvote404JSONResponse) VisitPatchStarUpvoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarUpvote500JSONResponse HTTPError

func (response PatchStarUpvote500JSONResponse) VisitPatchStarUpvoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostStarValidationRequestObject struct {
	StarId UUID `json:"star_id" bson:"star_id"`
}

type PostStarValidationResponseObject interface {
	VisitPostStarValidationResponse(w http.ResponseWriter) error
}

type PostStarValidation204Response struct {
}

func (response PostStarValidation204Response) VisitPostStarValidationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostStarValidation401JSONResponse HTTPError

func (response PostStarValidation401JSONResponse) VisitPostStarValidationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostStarValidation403JSONResponse HTTPError

func (response PostStarValidation403JSONResponse) VisitPostStarValidationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostStarValidation404JSONResponse HTTPError

func (response PostStarValidation404JSONResponse) VisitPostStarValidationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostStarValidation500JSONResponse HTTPError

func (response PostStarValidation500JSONResponse) VisitPostStarValidationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSuggestionRequestObject struct {
	Params DeleteSuggestionParams `bson:"params"`
}

type DeleteSuggestionResponseObject interface {
	VisitDeleteSuggestionResponse(w http.ResponseWriter) error
}

type DeleteSuggestion204Response struct {
}

func (response DeleteSuggestion204Response) VisitDeleteSuggestionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSuggestion401JSONResponse HTTPError

func (response DeleteSuggestion401JSONResponse) VisitDeleteSuggestionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSuggestion404JSONResponse HTTPError

func (response DeleteSuggestion404JSONResponse) VisitDeleteSuggestionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSuggestion409JSONResponse HTTPError

func (response DeleteSuggestion409JSONResponse) VisitDeleteSuggestionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSuggestion500JSONResponse HTTPError

func (response DeleteSuggestion500JSONResponse) VisitDeleteSuggestionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSuggestionsRequestObject struct {
	Params GetSuggestionsParams `bson:"params"`
}

type GetSuggestionsResponseObject interface {
	VisitGetSuggestionsResponse(w http.ResponseWriter) error
}

type GetSuggestions200JSONResponse struct {
	Limit       uint64       `json:"limit" bson:"limit"`
	MaxPage     uint64       `json:"max_page" bson:"max_page"`
	Message     *Messages    `json:"message,omitempty" bson:"message"`
	Page        uint64       `json:"page" bson:"page"`
	Suggestions []Suggestion `json:"suggestions" bson:"suggestions"`
}

func (response GetSuggestions200JSONResponse) VisitGetSuggestionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSuggestions401JSONResponse HTTPError

func (response GetSuggestions401JSONResponse) VisitGetSuggestionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSuggestions500JSONResponse HTTPError

func (response GetSuggestions500JSONResponse) VisitGetSuggestionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchSuggestionRequestObject struct {
	Params PatchSuggestionParams `bson:"params"`
}

type PatchSuggestionResponseObject interface {
	VisitPatchSuggestionResponse(w http.ResponseWriter) error
}

type PatchSuggestion204Response struct {
}

func (response PatchSuggestion204Response) VisitPatchSuggestionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PatchSuggestion401JSONResponse HTTPError

func (response PatchSuggestion401JSONResponse) VisitPatchSuggestionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchSuggestion404JSONResponse HTTPError

func (response PatchSuggestion404JSONResponse) VisitPatchSuggestionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchSuggestion500JSONResponse HTTPError

func (response PatchSuggestion500JSONResponse) VisitPatchSuggestionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSuggestionRequestObject struct {
	Body *PostSuggestionJSONRequestBody `bson:"body"`
}

type PostSuggestionResponseObject interface {
	VisitPostSuggestionResponse(w http.ResponseWriter) error
}

type PostSuggestion204Response struct {
}

func (response PostSuggestion204Response) VisitPostSuggestionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostSuggestion401JSONResponse HTTPError

func (response PostSuggestion401JSONResponse) VisitPostSuggestionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostSuggestion500JSONResponse HTTPError

func (response PostSuggestion500JSONResponse) VisitPostSuggestionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamRequestObject struct {
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(w http.ResponseWriter) error
}

type GetTeam200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	Teams   []Team    `json:"teams" bson:"teams"`
}

func (response GetTeam200JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeam401JSONResponse HTTPError

func (response GetTeam401JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTeam500JSONResponse HTTPError

func (response GetTeam500JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTeamRequestObject struct {
	Body *PostTeamJSONRequestBody `bson:"body"`
}

type PostTeamResponseObject interface {
	VisitPostTeamResponse(w http.ResponseWriter) error
}

type PostTeam204Response struct {
}

func (response PostTeam204Response) VisitPostTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostTeam401JSONResponse HTTPError

func (response PostTeam401JSONResponse) VisitPostTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTeam500JSONResponse HTTPError

func (response PostTeam500JSONResponse) VisitPostTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamRequestObject struct {
	Id UUID `json:"id" bson:"id"`
}

type DeleteTeamResponseObject interface {
	VisitDeleteTeamResponse(w http.ResponseWriter) error
}

type DeleteTeam204Response struct {
}

func (response DeleteTeam204Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTeam401JSONResponse HTTPError

func (response DeleteTeam401JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam404JSONResponse HTTPError

func (response DeleteTeam404JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam409JSONResponse HTTPError

func (response DeleteTeam409JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam500JSONResponse HTTPError

func (response DeleteTeam500JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamByIdRequestObject struct {
	Id UUID `json:"id" bson:"id"`
}

type GetTeamByIdResponseObject interface {
	VisitGetTeamByIdResponse(w http.ResponseWriter) error
}

type GetTeamById200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`

	// Team A team of freshmans
	Team Team `json:"team" bson:"team"`
}

func (response GetTeamById200JSONResponse) VisitGetTeamByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamById401JSONResponse HTTPError

func (response GetTeamById401JSONResponse) VisitGetTeamByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamById404JSONResponse HTTPError

func (response GetTeamById404JSONResponse) VisitGetTeamByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamById500JSONResponse HTTPError

func (response GetTeamById500JSONResponse) VisitGetTeamByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddUserTeamRequestObject struct {
	Id   UUID                        `json:"id" bson:"id"`
	Body *AddUserTeamJSONRequestBody `bson:"body"`
}

type AddUserTeamResponseObject interface {
	VisitAddUserTeamResponse(w http.ResponseWriter) error
}

type AddUserTeam204Response struct {
}

func (response AddUserTeam204Response) VisitAddUserTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AddUserTeam400JSONResponse HTTPError

func (response AddUserTeam400JSONResponse) VisitAddUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddUserTeam401JSONResponse HTTPError

func (response AddUserTeam401JSONResponse) VisitAddUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddUserTeam404JSONResponse HTTPError

func (response AddUserTeam404JSONResponse) VisitAddUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddUserTeam409JSONResponse HTTPError

func (response AddUserTeam409JSONResponse) VisitAddUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AddUserTeam500JSONResponse HTTPError

func (response AddUserTeam500JSONResponse) VisitAddUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams `bson:"params"`
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse struct {
	Limit   uint64    `json:"limit" bson:"limit"`
	MaxPage uint64    `json:"max_page" bson:"max_page"`
	Message *Messages `json:"message,omitempty" bson:"message"`
	Page    uint64    `json:"page" bson:"page"`
	Users   []User    `json:"users" bson:"users"`
}

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers400JSONResponse HTTPError

func (response GetUsers400JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse HTTPError

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse HTTPError

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserMeRequestObject struct {
}

type GetUserMeResponseObject interface {
	VisitGetUserMeResponse(w http.ResponseWriter) error
}

type GetUserMe200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	User    *User     `json:"user,omitempty" bson:"user"`
}

func (response GetUserMe200JSONResponse) VisitGetUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserMe401JSONResponse HTTPError

func (response GetUserMe401JSONResponse) VisitGetUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUserMe500JSONResponse HTTPError

func (response GetUserMe500JSONResponse) VisitGetUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchUserMeRequestObject struct {
	Body *PatchUserMeJSONRequestBody `bson:"body"`
}

type PatchUserMeResponseObject interface {
	VisitPatchUserMeResponse(w http.ResponseWriter) error
}

type PatchUserMe200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	User    *User     `json:"user,omitempty" bson:"user"`
}

func (response PatchUserMe200JSONResponse) VisitPatchUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUserMe401JSONResponse HTTPError

func (response PatchUserMe401JSONResponse) VisitPatchUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchUserMe500JSONResponse HTTPError

func (response PatchUserMe500JSONResponse) VisitPatchUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByIdRequestObject struct {
	UserId GoogleId `json:"user_id" bson:"user_id"`
}

type GetUserByIdResponseObject interface {
	VisitGetUserByIdResponse(w http.ResponseWriter) error
}

type GetUserById200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	User    *User     `json:"user,omitempty" bson:"user"`
}

func (response GetUserById200JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById401JSONResponse HTTPError

func (response GetUserById401JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById403JSONResponse HTTPError

func (response GetUserById403JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById404JSONResponse HTTPError

func (response GetUserById404JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById500JSONResponse HTTPError

func (response GetUserById500JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchUserByIdRequestObject struct {
	UserId GoogleId                      `json:"user_id" bson:"user_id"`
	Body   *PatchUserByIdJSONRequestBody `bson:"body"`
}

type PatchUserByIdResponseObject interface {
	VisitPatchUserByIdResponse(w http.ResponseWriter) error
}

type PatchUserById200JSONResponse struct {
	Message *Messages `json:"message,omitempty" bson:"message"`
	User    *User     `json:"user,omitempty" bson:"user"`
}

func (response PatchUserById200JSONResponse) VisitPatchUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUserById401JSONResponse HTTPError

func (response PatchUserById401JSONResponse) VisitPatchUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchUserById403JSONResponse HTTPError

func (response PatchUserById403JSONResponse) VisitPatchUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchUserById404JSONResponse HTTPError

func (response PatchUserById404JSONResponse) VisitPatchUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchUserById500JSONResponse HTTPError

func (response PatchUserById500JSONResponse) VisitPatchUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /auth/callback)
	Callback(ctx context.Context, request CallbackRequestObject) (CallbackResponseObject, error)

	// (GET /auth/login)
	Connect(ctx context.Context, request ConnectRequestObject) (ConnectResponseObject, error)

	// (GET /auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)

	// (DELETE /calendar)
	DeleteCalendar(ctx context.Context, request DeleteCalendarRequestObject) (DeleteCalendarResponseObject, error)

	// (GET /calendar)
	GetCalendar(ctx context.Context, request GetCalendarRequestObject) (GetCalendarResponseObject, error)

	// (POST /calendar)
	AppendCalendarDay(ctx context.Context, request AppendCalendarDayRequestObject) (AppendCalendarDayResponseObject, error)

	// (DELETE /calendar/{day})
	DeleteCalendarDay(ctx context.Context, request DeleteCalendarDayRequestObject) (DeleteCalendarDayResponseObject, error)

	// (GET /calendar/{day})
	GetCalendarDay(ctx context.Context, request GetCalendarDayRequestObject) (GetCalendarDayResponseObject, error)

	// (POST /calendar/{day})
	PostCalendarDay(ctx context.Context, request PostCalendarDayRequestObject) (PostCalendarDayResponseObject, error)

	// (GET /daily)
	CheckDaily(ctx context.Context, request CheckDailyRequestObject) (CheckDailyResponseObject, error)

	// (POST /daily)
	PlayDaily(ctx context.Context, request PlayDailyRequestObject) (PlayDailyResponseObject, error)

	// (GET /instagram)
	GetInstagram(ctx context.Context, request GetInstagramRequestObject) (GetInstagramResponseObject, error)

	// (PATCH /instagram)
	PatchInstagram(ctx context.Context, request PatchInstagramRequestObject) (PatchInstagramResponseObject, error)

	// (GET /mentoring)
	GetMentoringProcess(ctx context.Context, request GetMentoringProcessRequestObject) (GetMentoringProcessResponseObject, error)

	// (PATCH /mentoring)
	ToggleMentoringProcess(ctx context.Context, request ToggleMentoringProcessRequestObject) (ToggleMentoringProcessResponseObject, error)

	// (GET /mentoring/freshman)
	GetMentoringFreshmans(ctx context.Context, request GetMentoringFreshmansRequestObject) (GetMentoringFreshmansResponseObject, error)

	// (POST /mentoring/step)
	StartAssociation(ctx context.Context, request StartAssociationRequestObject) (StartAssociationResponseObject, error)

	// (GET /mentoring/wish)
	GetWish(ctx context.Context, request GetWishRequestObject) (GetWishResponseObject, error)

	// (POST /mentoring/wish)
	AddWish(ctx context.Context, request AddWishRequestObject) (AddWishResponseObject, error)

	// (DELETE /news)
	DeleteNews(ctx context.Context, request DeleteNewsRequestObject) (DeleteNewsResponseObject, error)

	// (GET /news)
	GetNews(ctx context.Context, request GetNewsRequestObject) (GetNewsResponseObject, error)

	// (POST /news)
	PostNews(ctx context.Context, request PostNewsRequestObject) (PostNewsResponseObject, error)

	// (DELETE /points)
	DeletePoints(ctx context.Context, request DeletePointsRequestObject) (DeletePointsResponseObject, error)

	// (GET /points)
	GetPointsTransactions(ctx context.Context, request GetPointsTransactionsRequestObject) (GetPointsTransactionsResponseObject, error)

	// (POST /points)
	AddPoints(ctx context.Context, request AddPointsRequestObject) (AddPointsResponseObject, error)

	// (DELETE /star)
	DeleteStarById(ctx context.Context, request DeleteStarByIdRequestObject) (DeleteStarByIdResponseObject, error)

	// (GET /star)
	GetStars(ctx context.Context, request GetStarsRequestObject) (GetStarsResponseObject, error)

	// (PATCH /star)
	EditStar(ctx context.Context, request EditStarRequestObject) (EditStarResponseObject, error)

	// (POST /star)
	PostUserStarsById(ctx context.Context, request PostUserStarsByIdRequestObject) (PostUserStarsByIdResponseObject, error)

	// (PATCH /star/{star_id}/upvote)
	PatchStarUpvote(ctx context.Context, request PatchStarUpvoteRequestObject) (PatchStarUpvoteResponseObject, error)

	// (POST /star/{star_id}/validate)
	PostStarValidation(ctx context.Context, request PostStarValidationRequestObject) (PostStarValidationResponseObject, error)

	// (DELETE /suggestion)
	DeleteSuggestion(ctx context.Context, request DeleteSuggestionRequestObject) (DeleteSuggestionResponseObject, error)

	// (GET /suggestion)
	GetSuggestions(ctx context.Context, request GetSuggestionsRequestObject) (GetSuggestionsResponseObject, error)

	// (PATCH /suggestion)
	PatchSuggestion(ctx context.Context, request PatchSuggestionRequestObject) (PatchSuggestionResponseObject, error)

	// (POST /suggestion)
	PostSuggestion(ctx context.Context, request PostSuggestionRequestObject) (PostSuggestionResponseObject, error)

	// (GET /team)
	GetTeam(ctx context.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)

	// (POST /team)
	PostTeam(ctx context.Context, request PostTeamRequestObject) (PostTeamResponseObject, error)

	// (DELETE /team/{id})
	DeleteTeam(ctx context.Context, request DeleteTeamRequestObject) (DeleteTeamResponseObject, error)

	// (GET /team/{id})
	GetTeamById(ctx context.Context, request GetTeamByIdRequestObject) (GetTeamByIdResponseObject, error)

	// (POST /team/{id})
	AddUserTeam(ctx context.Context, request AddUserTeamRequestObject) (AddUserTeamResponseObject, error)

	// (GET /user)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)

	// (GET /user/me)
	GetUserMe(ctx context.Context, request GetUserMeRequestObject) (GetUserMeResponseObject, error)

	// (PATCH /user/me)
	PatchUserMe(ctx context.Context, request PatchUserMeRequestObject) (PatchUserMeResponseObject, error)

	// (GET /user/{user_id})
	GetUserById(ctx context.Context, request GetUserByIdRequestObject) (GetUserByIdResponseObject, error)

	// (PATCH /user/{user_id})
	PatchUserById(ctx context.Context, request PatchUserByIdRequestObject) (PatchUserByIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface  `bson:"ssi"`
	middlewares []StrictMiddlewareFunc `bson:"middlewares"`
}

// Callback operation middleware
func (sh *strictHandler) Callback(ctx echo.Context, params CallbackParams) error {
	var request CallbackRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Callback(ctx.Request().Context(), request.(CallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Callback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CallbackResponseObject); ok {
		return validResponse.VisitCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Connect operation middleware
func (sh *strictHandler) Connect(ctx echo.Context, params ConnectParams) error {
	var request ConnectRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Connect(ctx.Request().Context(), request.(ConnectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Connect")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectResponseObject); ok {
		return validResponse.VisitConnectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx echo.Context) error {
	var request LogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx.Request().Context(), request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		return validResponse.VisitLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCalendar operation middleware
func (sh *strictHandler) DeleteCalendar(ctx echo.Context) error {
	var request DeleteCalendarRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCalendar(ctx.Request().Context(), request.(DeleteCalendarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCalendar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCalendarResponseObject); ok {
		return validResponse.VisitDeleteCalendarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCalendar operation middleware
func (sh *strictHandler) GetCalendar(ctx echo.Context, params GetCalendarParams) error {
	var request GetCalendarRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCalendar(ctx.Request().Context(), request.(GetCalendarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCalendar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCalendarResponseObject); ok {
		return validResponse.VisitGetCalendarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppendCalendarDay operation middleware
func (sh *strictHandler) AppendCalendarDay(ctx echo.Context) error {
	var request AppendCalendarDayRequestObject

	var body AppendCalendarDayJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppendCalendarDay(ctx.Request().Context(), request.(AppendCalendarDayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppendCalendarDay")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppendCalendarDayResponseObject); ok {
		return validResponse.VisitAppendCalendarDayResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCalendarDay operation middleware
func (sh *strictHandler) DeleteCalendarDay(ctx echo.Context, day int) error {
	var request DeleteCalendarDayRequestObject

	request.Day = day

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCalendarDay(ctx.Request().Context(), request.(DeleteCalendarDayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCalendarDay")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCalendarDayResponseObject); ok {
		return validResponse.VisitDeleteCalendarDayResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCalendarDay operation middleware
func (sh *strictHandler) GetCalendarDay(ctx echo.Context, day int) error {
	var request GetCalendarDayRequestObject

	request.Day = day

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCalendarDay(ctx.Request().Context(), request.(GetCalendarDayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCalendarDay")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCalendarDayResponseObject); ok {
		return validResponse.VisitGetCalendarDayResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCalendarDay operation middleware
func (sh *strictHandler) PostCalendarDay(ctx echo.Context, day int) error {
	var request PostCalendarDayRequestObject

	request.Day = day

	var body PostCalendarDayJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCalendarDay(ctx.Request().Context(), request.(PostCalendarDayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCalendarDay")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCalendarDayResponseObject); ok {
		return validResponse.VisitPostCalendarDayResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CheckDaily operation middleware
func (sh *strictHandler) CheckDaily(ctx echo.Context) error {
	var request CheckDailyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckDaily(ctx.Request().Context(), request.(CheckDailyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckDaily")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CheckDailyResponseObject); ok {
		return validResponse.VisitCheckDailyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PlayDaily operation middleware
func (sh *strictHandler) PlayDaily(ctx echo.Context) error {
	var request PlayDailyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PlayDaily(ctx.Request().Context(), request.(PlayDailyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PlayDaily")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PlayDailyResponseObject); ok {
		return validResponse.VisitPlayDailyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetInstagram operation middleware
func (sh *strictHandler) GetInstagram(ctx echo.Context) error {
	var request GetInstagramRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInstagram(ctx.Request().Context(), request.(GetInstagramRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInstagram")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetInstagramResponseObject); ok {
		return validResponse.VisitGetInstagramResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchInstagram operation middleware
func (sh *strictHandler) PatchInstagram(ctx echo.Context, params PatchInstagramParams) error {
	var request PatchInstagramRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchInstagram(ctx.Request().Context(), request.(PatchInstagramRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchInstagram")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchInstagramResponseObject); ok {
		return validResponse.VisitPatchInstagramResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMentoringProcess operation middleware
func (sh *strictHandler) GetMentoringProcess(ctx echo.Context) error {
	var request GetMentoringProcessRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMentoringProcess(ctx.Request().Context(), request.(GetMentoringProcessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMentoringProcess")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMentoringProcessResponseObject); ok {
		return validResponse.VisitGetMentoringProcessResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ToggleMentoringProcess operation middleware
func (sh *strictHandler) ToggleMentoringProcess(ctx echo.Context) error {
	var request ToggleMentoringProcessRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ToggleMentoringProcess(ctx.Request().Context(), request.(ToggleMentoringProcessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ToggleMentoringProcess")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ToggleMentoringProcessResponseObject); ok {
		return validResponse.VisitToggleMentoringProcessResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMentoringFreshmans operation middleware
func (sh *strictHandler) GetMentoringFreshmans(ctx echo.Context, params GetMentoringFreshmansParams) error {
	var request GetMentoringFreshmansRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMentoringFreshmans(ctx.Request().Context(), request.(GetMentoringFreshmansRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMentoringFreshmans")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMentoringFreshmansResponseObject); ok {
		return validResponse.VisitGetMentoringFreshmansResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// StartAssociation operation middleware
func (sh *strictHandler) StartAssociation(ctx echo.Context) error {
	var request StartAssociationRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StartAssociation(ctx.Request().Context(), request.(StartAssociationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartAssociation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StartAssociationResponseObject); ok {
		return validResponse.VisitStartAssociationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetWish operation middleware
func (sh *strictHandler) GetWish(ctx echo.Context) error {
	var request GetWishRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWish(ctx.Request().Context(), request.(GetWishRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWish")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWishResponseObject); ok {
		return validResponse.VisitGetWishResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddWish operation middleware
func (sh *strictHandler) AddWish(ctx echo.Context) error {
	var request AddWishRequestObject

	var body AddWishJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddWish(ctx.Request().Context(), request.(AddWishRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddWish")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddWishResponseObject); ok {
		return validResponse.VisitAddWishResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteNews operation middleware
func (sh *strictHandler) DeleteNews(ctx echo.Context, params DeleteNewsParams) error {
	var request DeleteNewsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNews(ctx.Request().Context(), request.(DeleteNewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNews")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteNewsResponseObject); ok {
		return validResponse.VisitDeleteNewsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetNews operation middleware
func (sh *strictHandler) GetNews(ctx echo.Context) error {
	var request GetNewsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNews(ctx.Request().Context(), request.(GetNewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNews")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetNewsResponseObject); ok {
		return validResponse.VisitGetNewsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostNews operation middleware
func (sh *strictHandler) PostNews(ctx echo.Context) error {
	var request PostNewsRequestObject

	var body PostNewsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostNews(ctx.Request().Context(), request.(PostNewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostNews")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostNewsResponseObject); ok {
		return validResponse.VisitPostNewsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePoints operation middleware
func (sh *strictHandler) DeletePoints(ctx echo.Context, params DeletePointsParams) error {
	var request DeletePointsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePoints(ctx.Request().Context(), request.(DeletePointsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePoints")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePointsResponseObject); ok {
		return validResponse.VisitDeletePointsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPointsTransactions operation middleware
func (sh *strictHandler) GetPointsTransactions(ctx echo.Context, params GetPointsTransactionsParams) error {
	var request GetPointsTransactionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPointsTransactions(ctx.Request().Context(), request.(GetPointsTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPointsTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPointsTransactionsResponseObject); ok {
		return validResponse.VisitGetPointsTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddPoints operation middleware
func (sh *strictHandler) AddPoints(ctx echo.Context) error {
	var request AddPointsRequestObject

	var body AddPointsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddPoints(ctx.Request().Context(), request.(AddPointsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPoints")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddPointsResponseObject); ok {
		return validResponse.VisitAddPointsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteStarById operation middleware
func (sh *strictHandler) DeleteStarById(ctx echo.Context, params DeleteStarByIdParams) error {
	var request DeleteStarByIdRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteStarById(ctx.Request().Context(), request.(DeleteStarByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteStarById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteStarByIdResponseObject); ok {
		return validResponse.VisitDeleteStarByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetStars operation middleware
func (sh *strictHandler) GetStars(ctx echo.Context, params GetStarsParams) error {
	var request GetStarsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStars(ctx.Request().Context(), request.(GetStarsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStars")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetStarsResponseObject); ok {
		return validResponse.VisitGetStarsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EditStar operation middleware
func (sh *strictHandler) EditStar(ctx echo.Context) error {
	var request EditStarRequestObject

	var body EditStarJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EditStar(ctx.Request().Context(), request.(EditStarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EditStar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EditStarResponseObject); ok {
		return validResponse.VisitEditStarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUserStarsById operation middleware
func (sh *strictHandler) PostUserStarsById(ctx echo.Context, params PostUserStarsByIdParams) error {
	var request PostUserStarsByIdRequestObject

	request.Params = params

	var body PostUserStarsByIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserStarsById(ctx.Request().Context(), request.(PostUserStarsByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserStarsById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUserStarsByIdResponseObject); ok {
		return validResponse.VisitPostUserStarsByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchStarUpvote operation middleware
func (sh *strictHandler) PatchStarUpvote(ctx echo.Context, starId UUID) error {
	var request PatchStarUpvoteRequestObject

	request.StarId = starId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchStarUpvote(ctx.Request().Context(), request.(PatchStarUpvoteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchStarUpvote")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchStarUpvoteResponseObject); ok {
		return validResponse.VisitPatchStarUpvoteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostStarValidation operation middleware
func (sh *strictHandler) PostStarValidation(ctx echo.Context, starId UUID) error {
	var request PostStarValidationRequestObject

	request.StarId = starId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostStarValidation(ctx.Request().Context(), request.(PostStarValidationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostStarValidation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostStarValidationResponseObject); ok {
		return validResponse.VisitPostStarValidationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSuggestion operation middleware
func (sh *strictHandler) DeleteSuggestion(ctx echo.Context, params DeleteSuggestionParams) error {
	var request DeleteSuggestionRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSuggestion(ctx.Request().Context(), request.(DeleteSuggestionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSuggestion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteSuggestionResponseObject); ok {
		return validResponse.VisitDeleteSuggestionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSuggestions operation middleware
func (sh *strictHandler) GetSuggestions(ctx echo.Context, params GetSuggestionsParams) error {
	var request GetSuggestionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSuggestions(ctx.Request().Context(), request.(GetSuggestionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSuggestions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSuggestionsResponseObject); ok {
		return validResponse.VisitGetSuggestionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchSuggestion operation middleware
func (sh *strictHandler) PatchSuggestion(ctx echo.Context, params PatchSuggestionParams) error {
	var request PatchSuggestionRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchSuggestion(ctx.Request().Context(), request.(PatchSuggestionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchSuggestion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchSuggestionResponseObject); ok {
		return validResponse.VisitPatchSuggestionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostSuggestion operation middleware
func (sh *strictHandler) PostSuggestion(ctx echo.Context) error {
	var request PostSuggestionRequestObject

	var body PostSuggestionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSuggestion(ctx.Request().Context(), request.(PostSuggestionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSuggestion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSuggestionResponseObject); ok {
		return validResponse.VisitPostSuggestionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeam operation middleware
func (sh *strictHandler) GetTeam(ctx echo.Context) error {
	var request GetTeamRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx.Request().Context(), request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		return validResponse.VisitGetTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTeam operation middleware
func (sh *strictHandler) PostTeam(ctx echo.Context) error {
	var request PostTeamRequestObject

	var body PostTeamJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTeam(ctx.Request().Context(), request.(PostTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTeamResponseObject); ok {
		return validResponse.VisitPostTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTeam operation middleware
func (sh *strictHandler) DeleteTeam(ctx echo.Context, id UUID) error {
	var request DeleteTeamRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeam(ctx.Request().Context(), request.(DeleteTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTeamResponseObject); ok {
		return validResponse.VisitDeleteTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeamById operation middleware
func (sh *strictHandler) GetTeamById(ctx echo.Context, id UUID) error {
	var request GetTeamByIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeamById(ctx.Request().Context(), request.(GetTeamByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeamById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTeamByIdResponseObject); ok {
		return validResponse.VisitGetTeamByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddUserTeam operation middleware
func (sh *strictHandler) AddUserTeam(ctx echo.Context, id UUID) error {
	var request AddUserTeamRequestObject

	request.Id = id

	var body AddUserTeamJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddUserTeam(ctx.Request().Context(), request.(AddUserTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddUserTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddUserTeamResponseObject); ok {
		return validResponse.VisitAddUserTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx echo.Context, params GetUsersParams) error {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.Request().Context(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		return validResponse.VisitGetUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserMe operation middleware
func (sh *strictHandler) GetUserMe(ctx echo.Context) error {
	var request GetUserMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserMe(ctx.Request().Context(), request.(GetUserMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserMeResponseObject); ok {
		return validResponse.VisitGetUserMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchUserMe operation middleware
func (sh *strictHandler) PatchUserMe(ctx echo.Context) error {
	var request PatchUserMeRequestObject

	var body PatchUserMeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUserMe(ctx.Request().Context(), request.(PatchUserMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUserMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchUserMeResponseObject); ok {
		return validResponse.VisitPatchUserMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserById operation middleware
func (sh *strictHandler) GetUserById(ctx echo.Context, userId GoogleId) error {
	var request GetUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserById(ctx.Request().Context(), request.(GetUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserByIdResponseObject); ok {
		return validResponse.VisitGetUserByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchUserById operation middleware
func (sh *strictHandler) PatchUserById(ctx echo.Context, userId GoogleId) error {
	var request PatchUserByIdRequestObject

	request.UserId = userId

	var body PatchUserByIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUserById(ctx.Request().Context(), request.(PatchUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUserById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchUserByIdResponseObject); ok {
		return validResponse.VisitPatchUserByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
